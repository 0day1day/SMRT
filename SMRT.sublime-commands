[
    {
        "caption": "SMRT: Unix Timestamp From Int",
        "command": "timestamp_from_int",
        "args": { "format": "Unix" }
    },
    {
        "caption": "SMRT: Base64 Encode",
        "command": "base_xx_encode",
        "args": { "xx": 64 }
    },
    {
        "caption": "SMRT: Base32 Encode",
        "command": "base_xx_encode",
        "args": { "xx": 32 }
    },
    {
        "caption": "SMRT: Base64 Decode",
        "command": "base_xx_decode",
        "args": { "xx": 64 }
    },
    {
        "caption": "SMRT: Base32 Decode",
        "command": "base_xx_decode",
        "args": { "xx": 32 }
    },
    {
        "caption": "SMRT: Rot13 Encode",
        "command": "text_translate",
        "args": { "rot": 26 }
    },
    {
        "caption": "SMRT: RotX Encode",
        "command": "get_text_rot_value"
    },
    {
        "caption": "SMRT: Swap Char",
        "command": "get_swap_map"
    },
    {
        "caption": "SMRT: MD5",
        "command": "hash",
        "args": { "alg": "md5" }
    },
    {
        "caption": "SMRT: SHA1",
        "command": "hash",
        "args": { "alg": "sha1" }
    },
    {
        "caption": "SMRT: SHA256",
        "command": "hash",
        "args": { "alg": "sha256" }
    },
    {
        "caption": "SMRT: Hex to Int",
        "command": "hex_to_int"
    },
    {
        "caption": "SMRT: Int to Hex",
        "command": "int_to_hex"
    },
    {
        "caption": "SMRT: Byte Format Hex",
        "command": "format_hex",
        "args": { "bytes": 1}
    },
    {
        "caption": "SMRT: Word Format Hex",
        "command": "format_hex",
        "args": { "bytes": 2}
    },
    {
        "caption": "SMRT: DWord Format Hex",
        "command": "format_hex",
        "args": { "bytes": 4}
    },
    {
        "caption": "SMRT: Base64 Encode Binary",
        "command": "base_xx_encode_binary",
        "args": { "xx": 64 }
    },
    {
        "caption": "SMRT: Base64 Decode Binary",
        "command": "base_xx_decode_binary",
        "args": { "xx": 64 }
    },
    {
        "caption": "SMRT: Hex Encode ASCII",
        "command": "hex_encode",
        "args": { "encoding": "ascii "}
    },
    {
        "caption": "SMRT: Hex Encode UTF-8",
        "command": "hex_encode",
        "args": { "encoding": "utf-8"}
    },
    {
        "caption": "SMRT: Hex Encode UTF-16",
        "command": "hex_encode",
        "args": { "encoding": "utf-16 "}
    },
    {
        "caption": "SMRT: Hex Decode ASCII",
        "command": "hex_decode",
        "args": { "encoding": "ascii "}
    },
    {
        "caption": "SMRT: Hex Decode UTF-8",
        "command": "hex_decode",
        "args": { "encoding": "utf-8 "}
    },
    {
        "caption": "SMRT: Hex Decode UTF-16",
        "command": "hex_decode",
        "args": { "encoding": "utf-16"}
    },
    {
        "caption": "SMRT: Zlib Decompress Binary",
        "command": "zlib_decompress",
        "args": { "wbits": 15 }
    },
    {
        "caption": "SMRT: Zlib Compress Binary",
        "command": "compress",
        "args": { "cformat": "zlib" }
    },
    {
        "caption": "SMRT: INFLATE Decompress Binary",
        "command": "zlib_decompress",
        "args": { "wbits": -15 }
    },
    {
        "caption": "SMRT: DEFLATE Compress Binary",
        "command": "compress",
        "args": { "cformat": "deflate" }
    },
    {
        "caption": "SMRT: Gzip Decompress Binary",
        "command": "zlib_decompress",
        "args": { "wbits": 31 }
    },
    {
        "caption": "SMRT: Gzip Compress Binary",
        "command": "compress",
        "args": { "cformat": "gzip" }
    },
    {
        "caption": "SMRT: URL Quote",
        "command": "url_quote"
    },
    {
        "caption": "SMRT: URL Unquote",
        "command": "url_unquote"
    },
    {
        "caption": "SMRT: NBO Int to IP",
        "command": "int_to_ip",
        "args": { "order": "N"}
    },
    {
        "caption": "SMRT: HBO Int to IP",
        "command": "int_to_ip",
        "args": { "order": "H"}
    },
    {
        "caption": "SMRT: IP to NBO Int",
        "command": "ip_to_int",
        "args": { "order": "N"}
    },
    {
        "caption": "SMRT: IP to HBO Int",
        "command": "ip_to_int",
        "args": { "order": "H"}
    },
    {
        "caption": "SMRT: Switch Endianness",
        "command": "switch_endianness"
    },
    {
        "caption": "SMRT: PE Scanner",
        "command": "pe_scanner"
    },
    {
        "caption": "SMRT: Apply XOR",
        "command": "get_xor_keys"
    },
    {
        "caption": "SMRT: Apply XOR Skip Zero and Key",
        "command": "get_xor_keys",
        "args": { "skip_zero_and_key": "True"}
    },
    {
        "caption": "SMRT: Binary Text to Hex",
        "command": "binary_to_hex",
    },
    {
        "caption": "SMRT: Hex to Binary Text",
        "command": "hex_to_binary",
    },
    {
        "caption": "SMRT: Int to Alpha",
        "command": "int_to_alpha",
    },
    {
        "caption": "SMRT: Alpha to Int",
        "command": "alpha_to_int",
    },
    {
        "caption": "SMRT: Find PE",
        "command": "find_pe",
    },
    {
        "caption": "SMRT: Brute XOR Find PE",
        "command": "brute_xor_find_pe",
    }
]