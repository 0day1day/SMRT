[
    {
        "caption": "SMRT: Unix Timestamp From Int",
        "command": "timestamp_from_int",
        "args": { "format": "Unix" }
    },
    {
        "caption": "SMRT: UTF-8 To Base64",
        "command": "base_xx_encode",
        "args": { "xx": 64 }
    },
    {
        "caption": "SMRT: UTF-8 To Base32",
        "command": "base_xx_encode",
        "args": { "xx": 32 }
    },
    {
        "caption": "SMRT: Base64 To UTF-8",
        "command": "base_xx_decode",
        "args": { "xx": 64 }
    },
    {
        "caption": "SMRT: Base32 To UTF-8",
        "command": "base_xx_decode",
        "args": { "xx": 32 }
    },
    {
        "caption": "SMRT: Rot13 Encode Text",
        "command": "text_translate",
        "args": { "rot": 26 }
    },
    {
        "caption": "SMRT: RotX Encode Text",
        "command": "get_text_rot_value"
    },
    {
        "caption": "SMRT: Swap Char",
        "command": "get_swap_map"
    },
    {
        "caption": "SMRT: UTF-8 To MD5",
        "command": "hash",
        "args": { "alg": "md5" }
    },
    {
        "caption": "SMRT: UTF-8 To SHA1",
        "command": "hash",
        "args": { "alg": "sha1" }
    },
    {
        "caption": "SMRT: UTF-8 To SHA256",
        "command": "hash",
        "args": { "alg": "sha256" }
    },
    {
        "caption": "SMRT: Hex to Int",
        "command": "hex_to_int"
    },
    {
        "caption": "SMRT: Int to Hex",
        "command": "int_to_hex"
    },
    {
        "caption": "SMRT: Byte Format Hex",
        "command": "format_hex",
        "args": { "bytes": 1}
    },
    {
        "caption": "SMRT: Word Format Hex",
        "command": "format_hex",
        "args": { "bytes": 2}
    },
    {
        "caption": "SMRT: DWord Format Hex",
        "command": "format_hex",
        "args": { "bytes": 4}
    },
    {
        "caption": "SMRT: Hex To Base64",
        "command": "base_xx_encode_hex",
        "args": { "xx": 64 }
    },
    {
        "caption": "SMRT: Base64 To Hex",
        "command": "base_xx_decode_hex",
        "args": { "xx": 64 }
    },
    {
        "caption": "SMRT: ASCII To Hex",
        "command": "hex_encode",
        "args": { "encoding": "ascii "}
    },
    {
        "caption": "SMRT: UTF-8 To Hex",
        "command": "hex_encode",
        "args": { "encoding": "utf-8"}
    },
    {
        "caption": "SMRT: UTF-16 To Hex",
        "command": "hex_encode",
        "args": { "encoding": "utf-16 "}
    },
    {
        "caption": "SMRT: Hex To ASCII",
        "command": "hex_decode",
        "args": { "encoding": "ascii "}
    },
    {
        "caption": "SMRT: Hex To UTF-8",
        "command": "hex_decode",
        "args": { "encoding": "utf-8 "}
    },
    {
        "caption": "SMRT: Hex To UTF-16",
        "command": "hex_decode",
        "args": { "encoding": "utf-16"}
    },
    {
        "caption": "SMRT: Zlib Decompress Hex",
        "command": "zlib_decompress",
        "args": { "wbits": 15 }
    },
    {
        "caption": "SMRT: Zlib Compress Hex",
        "command": "compress",
        "args": { "cformat": "zlib" }
    },
    {
        "caption": "SMRT: INFLATE Decompress Hex",
        "command": "zlib_decompress",
        "args": { "wbits": -15 }
    },
    {
        "caption": "SMRT: DEFLATE Compress Hex",
        "command": "compress",
        "args": { "cformat": "deflate" }
    },
    {
        "caption": "SMRT: Gzip Decompress Hex",
        "command": "zlib_decompress",
        "args": { "wbits": 31 }
    },
    {
        "caption": "SMRT: Gzip Compress Hex",
        "command": "compress",
        "args": { "cformat": "gzip" }
    },
    {
        "caption": "SMRT: URL Quote",
        "command": "url_quote"
    },
    {
        "caption": "SMRT: URL Unquote",
        "command": "url_unquote"
    },
    {
        "caption": "SMRT: NBO Int To IP",
        "command": "int_to_ip",
        "args": { "order": "N"}
    },
    {
        "caption": "SMRT: HBO Int To IP",
        "command": "int_to_ip",
        "args": { "order": "H"}
    },
    {
        "caption": "SMRT: IP To NBO Int",
        "command": "ip_to_int",
        "args": { "order": "N"}
    },
    {
        "caption": "SMRT: IP To HBO Int",
        "command": "ip_to_int",
        "args": { "order": "H"}
    },
    {
        "caption": "SMRT: Switch Endianness",
        "command": "switch_endianness"
    },
    {
        "caption": "SMRT: PE Scanner",
        "command": "pe_scanner"
    },
    {
        "caption": "SMRT: Apply XOR",
        "command": "get_xor_keys"
    },
    {
        "caption": "SMRT: Apply XOR Skip Zero and Key",
        "command": "get_xor_keys",
        "args": { "skip_zero_and_key": "True"}
    },
    {
        "caption": "SMRT: Binary to Hex",
        "command": "binary_to_hex",
    },
    {
        "caption": "SMRT: Hex to Binary",
        "command": "hex_to_binary",
    },
    {
        "caption": "SMRT: Int To Alpha",
        "command": "int_to_alpha",
    },
    {
        "caption": "SMRT: Alpha To Int",
        "command": "alpha_to_int",
    },
    {
        "caption": "SMRT: Find PE",
        "command": "find_pe",
    },
    {
        "caption": "SMRT: Brute XOR Find PE",
        "command": "brute_xor_find_pe",
    },
    {
        "caption": "SMRT: Code Point To Unicode",
        "command": "codepoint_to_unicode",
    },
    {
        "caption": "SMRT: Unicode To Code Point",
        "command": "unicode_to_codepoint",
    },
]